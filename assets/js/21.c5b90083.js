(window.webpackJsonp=window.webpackJsonp||[]).push([[21],{542:function(e,o,t){"use strict";t.r(o);var r=t(25),d=Object(r.a)({},(function(){var e=this,o=e.$createElement,t=e._self._c||o;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h1",{attrs:{id:"explodemodifier"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#explodemodifier"}},[e._v("#")]),e._v(" ExplodeModifier")]),e._v(" "),t("p",[t("a",{attrs:{name:"ExplodeModifier"}})]),e._v(" "),t("h2",{attrs:{id:"explodemodifier-⇐-comparisonmodifier"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#explodemodifier-⇐-comparisonmodifier"}},[e._v("#")]),e._v(" ExplodeModifier ⇐ "),t("code",[e._v("ComparisonModifier")])]),e._v(" "),t("p",[e._v("An "),t("code",[e._v("ExplodeModifier")]),e._v(" re-rolls dice that match a given test, and adds them to the results.")]),e._v(" "),t("p",[t("strong",[e._v("Kind")]),e._v(": global class"),t("br"),e._v(" "),t("strong",[e._v("Extends")]),e._v(": "),t("code",[e._v("ComparisonModifier")]),t("br"),e._v(" "),t("strong",[e._v("See")]),e._v(": "),t("a",{attrs:{href:"ReRollModifier"}},[e._v("ReRollModifier")]),e._v(" if you want to replace the old value with the new, rather than adding")]),e._v(" "),t("ul",[t("li",[t("a",{attrs:{href:"#ExplodeModifier"}},[e._v("ExplodeModifier")]),e._v(" ⇐ "),t("code",[e._v("ComparisonModifier")]),e._v(" "),t("ul",[t("li",[t("a",{attrs:{href:"#new_ExplodeModifier_new"}},[e._v("new ExplodeModifier([comparePoint], [compound], [penetrate])")])]),e._v(" "),t("li",[t("a",{attrs:{href:"#ExplodeModifier+compound"}},[e._v(".compound")]),e._v(" ⇒ "),t("code",[e._v("boolean")])]),e._v(" "),t("li",[t("a",{attrs:{href:"#ExplodeModifier+name"}},[e._v(".name")]),e._v(" ⇒ "),t("code",[e._v("string")])]),e._v(" "),t("li",[t("a",{attrs:{href:"#ExplodeModifier+notation"}},[e._v(".notation")]),e._v(" ⇒ "),t("code",[e._v("string")])]),e._v(" "),t("li",[t("a",{attrs:{href:"#ExplodeModifier+penetrate"}},[e._v(".penetrate")]),e._v(" ⇒ "),t("code",[e._v("boolean")])]),e._v(" "),t("li",[t("a",{attrs:{href:"#ExplodeModifier+run"}},[e._v(".run(results, _dice)")]),e._v(" ⇒ "),t("code",[e._v("RollResults")])]),e._v(" "),t("li",[t("a",{attrs:{href:"#ExplodeModifier+toJSON"}},[e._v(".toJSON()")]),e._v(" ⇒ "),t("code",[e._v("Object")])])])])]),e._v(" "),t("p",[t("a",{attrs:{name:"new_ExplodeModifier_new"}})]),e._v(" "),t("h3",{attrs:{id:"new-explodemodifier-comparepoint-compound-penetrate"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#new-explodemodifier-comparepoint-compound-penetrate"}},[e._v("#")]),e._v(" new ExplodeModifier([comparePoint], [compound], [penetrate])")]),e._v(" "),t("p",[e._v("Create an "),t("code",[e._v("ExplodeModifier")]),e._v(" instance")]),e._v(" "),t("p",[t("strong",[e._v("Throws")]),e._v(":")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("TypeError")]),e._v(" comparePoint must be a "),t("code",[e._v("ComparePoint")]),e._v(" object")])]),e._v(" "),t("table",[t("thead",[t("tr",[t("th",[e._v("Param")]),e._v(" "),t("th",[e._v("Type")]),e._v(" "),t("th",[e._v("Default")]),e._v(" "),t("th",[e._v("Description")])])]),e._v(" "),t("tbody",[t("tr",[t("td",[e._v("[comparePoint]")]),e._v(" "),t("td",[t("code",[e._v("ComparePoint")])]),e._v(" "),t("td",[t("code")]),e._v(" "),t("td",[e._v("The comparison object")])]),e._v(" "),t("tr",[t("td",[e._v("[compound]")]),e._v(" "),t("td",[t("code",[e._v("boolean")])]),e._v(" "),t("td",[t("code",[e._v("false")])]),e._v(" "),t("td",[e._v("Whether to compound or not")])]),e._v(" "),t("tr",[t("td",[e._v("[penetrate]")]),e._v(" "),t("td",[t("code",[e._v("boolean")])]),e._v(" "),t("td",[t("code",[e._v("false")])]),e._v(" "),t("td",[e._v("Whether to penetrate or not")])])])]),e._v(" "),t("p",[t("a",{attrs:{name:"ExplodeModifier+compound"}})]),e._v(" "),t("h3",{attrs:{id:"explodemodifier-compound-⇒-boolean"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#explodemodifier-compound-⇒-boolean"}},[e._v("#")]),e._v(" explodeModifier.compound ⇒ "),t("code",[e._v("boolean")])]),e._v(" "),t("p",[e._v("Whether the modifier should compound the results or not.")]),e._v(" "),t("p",[t("strong",[e._v("Kind")]),e._v(": instance property of "),t("a",{attrs:{href:"#ExplodeModifier"}},[t("code",[e._v("ExplodeModifier")])]),t("br"),e._v(" "),t("strong",[e._v("Returns")]),e._v(": "),t("code",[e._v("boolean")]),e._v(" - "),t("code",[e._v("true")]),e._v(" if it should compound, "),t("code",[e._v("false")]),e._v(" otherwise"),t("br"),e._v(" "),t("a",{attrs:{name:"ExplodeModifier+name"}})]),e._v(" "),t("h3",{attrs:{id:"explodemodifier-name-⇒-string"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#explodemodifier-name-⇒-string"}},[e._v("#")]),e._v(" explodeModifier.name ⇒ "),t("code",[e._v("string")])]),e._v(" "),t("p",[e._v("The name of the modifier.")]),e._v(" "),t("p",[t("strong",[e._v("Kind")]),e._v(": instance property of "),t("a",{attrs:{href:"#ExplodeModifier"}},[t("code",[e._v("ExplodeModifier")])]),t("br"),e._v(" "),t("strong",[e._v("Returns")]),e._v(": "),t("code",[e._v("string")]),e._v(" - 'explode'"),t("br"),e._v(" "),t("a",{attrs:{name:"ExplodeModifier+notation"}})]),e._v(" "),t("h3",{attrs:{id:"explodemodifier-notation-⇒-string"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#explodemodifier-notation-⇒-string"}},[e._v("#")]),e._v(" explodeModifier.notation ⇒ "),t("code",[e._v("string")])]),e._v(" "),t("p",[e._v("The modifier's notation.")]),e._v(" "),t("p",[t("strong",[e._v("Kind")]),e._v(": instance property of "),t("a",{attrs:{href:"#ExplodeModifier"}},[t("code",[e._v("ExplodeModifier")])]),t("br"),e._v(" "),t("a",{attrs:{name:"ExplodeModifier+penetrate"}})]),e._v(" "),t("h3",{attrs:{id:"explodemodifier-penetrate-⇒-boolean"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#explodemodifier-penetrate-⇒-boolean"}},[e._v("#")]),e._v(" explodeModifier.penetrate ⇒ "),t("code",[e._v("boolean")])]),e._v(" "),t("p",[e._v("Whether the modifier should penetrate the results or not.")]),e._v(" "),t("p",[t("strong",[e._v("Kind")]),e._v(": instance property of "),t("a",{attrs:{href:"#ExplodeModifier"}},[t("code",[e._v("ExplodeModifier")])]),t("br"),e._v(" "),t("strong",[e._v("Returns")]),e._v(": "),t("code",[e._v("boolean")]),e._v(" - "),t("code",[e._v("true")]),e._v(" if it should penetrate, "),t("code",[e._v("false")]),e._v(" otherwise"),t("br"),e._v(" "),t("a",{attrs:{name:"ExplodeModifier+run"}})]),e._v(" "),t("h3",{attrs:{id:"explodemodifier-run-results-dice-⇒-rollresults"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#explodemodifier-run-results-dice-⇒-rollresults"}},[e._v("#")]),e._v(" explodeModifier.run(results, _dice) ⇒ "),t("code",[e._v("RollResults")])]),e._v(" "),t("p",[e._v("Run the modifier on the results.")]),e._v(" "),t("p",[t("strong",[e._v("Kind")]),e._v(": instance method of "),t("a",{attrs:{href:"#ExplodeModifier"}},[t("code",[e._v("ExplodeModifier")])]),t("br"),e._v(" "),t("strong",[e._v("Returns")]),e._v(": "),t("code",[e._v("RollResults")]),e._v(" - The modified results")]),e._v(" "),t("table",[t("thead",[t("tr",[t("th",[e._v("Param")]),e._v(" "),t("th",[e._v("Type")]),e._v(" "),t("th",[e._v("Description")])])]),e._v(" "),t("tbody",[t("tr",[t("td",[e._v("results")]),e._v(" "),t("td",[t("code",[e._v("RollResults")])]),e._v(" "),t("td",[e._v("The results to run the modifier against")])]),e._v(" "),t("tr",[t("td",[e._v("_dice")]),e._v(" "),t("td",[t("code",[e._v("StandardDice")])]),e._v(" "),t("td",[e._v("The die that the modifier is attached to")])])])]),e._v(" "),t("p",[t("a",{attrs:{name:"ExplodeModifier+toJSON"}})]),e._v(" "),t("h3",{attrs:{id:"explodemodifier-tojson-⇒-object"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#explodemodifier-tojson-⇒-object"}},[e._v("#")]),e._v(" explodeModifier.toJSON() ⇒ "),t("code",[e._v("Object")])]),e._v(" "),t("p",[e._v("Return an object for JSON serialising.")]),e._v(" "),t("p",[e._v("This is called automatically when JSON encoding the object.")]),e._v(" "),t("p",[t("strong",[e._v("Kind")]),e._v(": instance method of "),t("a",{attrs:{href:"#ExplodeModifier"}},[t("code",[e._v("ExplodeModifier")])])])])}),[],!1,null,null,null);o.default=d.exports}}]);