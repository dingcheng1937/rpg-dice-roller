(window.webpackJsonp=window.webpackJsonp||[]).push([[35],{556:function(e,t,a){"use strict";a.r(t);var v=a(25),r=Object(v.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h1",{attrs:{id:"utils"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#utils"}},[e._v("#")]),e._v(" utils")]),e._v(" "),a("h2",{attrs:{id:"functions"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#functions"}},[e._v("#")]),e._v(" Functions")]),e._v(" "),a("dl",[a("dt",[a("a",{attrs:{href:"#compareNumbers"}},[e._v("compareNumbers(a, b, operator)")]),e._v(" ⇒ "),a("code",[e._v("boolean")])]),e._v(" "),a("dd",[a("p",[e._v("Check if "),a("code",[e._v("a")]),e._v(" is comparative to "),a("code",[e._v("b")]),e._v(" with the given operator.")])]),e._v(" "),a("dt",[a("a",{attrs:{href:"#isBase64"}},[e._v("isBase64(val)")]),e._v(" ⇒ "),a("code",[e._v("boolean")])]),e._v(" "),a("dd",[a("p",[e._v("Check if the value is a valid base64 encoded string.")])]),e._v(" "),a("dt",[a("a",{attrs:{href:"#isJson"}},[e._v("isJson(val)")]),e._v(" ⇒ "),a("code",[e._v("boolean")])]),e._v(" "),a("dd",[a("p",[e._v("Check if the value is a valid JSON encoded string.")])]),e._v(" "),a("dt",[a("a",{attrs:{href:"#isNumeric"}},[e._v("isNumeric(val)")]),e._v(" ⇒ "),a("code",[e._v("boolean")])]),e._v(" "),a("dd",[a("p",[e._v("Check if the given value is a valid finite number.")])]),e._v(" "),a("dt",[a("a",{attrs:{href:"#isSafeNumber"}},[e._v("isSafeNumber(val)")]),e._v(" ⇒ "),a("code",[e._v("boolean")])]),e._v(" "),a("dd",[a("p",[e._v('Check if the given value is a "safe" number.')]),e._v(" "),a("p",[e._v('A "safe" number falls within the '),a("code",[e._v("Number.MAX_SAFE_INTEGER")]),e._v(" and "),a("code",[e._v("Number.MIN_SAFE_INTEGER")]),e._v(" values\n(Inclusive).")])]),e._v(" "),a("dt",[a("a",{attrs:{href:"#sumArray"}},[e._v("sumArray(numbers)")]),e._v(" ⇒ "),a("code",[e._v("number")])]),e._v(" "),a("dd",[a("p",[e._v("Take an array of numbers and add the values together.")])]),e._v(" "),a("dt",[a("a",{attrs:{href:"#toFixed"}},[e._v("toFixed(num, [precision])")]),e._v(" ⇒ "),a("code",[e._v("number")])]),e._v(" "),a("dd",[a("p",[e._v("Round a number to the given amount of digits after the decimal point, removing any trailing\nzeros after the decimal point.")])])]),e._v(" "),a("p",[a("a",{attrs:{name:"compareNumbers"}})]),e._v(" "),a("h2",{attrs:{id:"comparenumbers-a-b-operator-⇒-boolean"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#comparenumbers-a-b-operator-⇒-boolean"}},[e._v("#")]),e._v(" compareNumbers(a, b, operator) ⇒ "),a("code",[e._v("boolean")])]),e._v(" "),a("p",[e._v("Check if "),a("code",[e._v("a")]),e._v(" is comparative to "),a("code",[e._v("b")]),e._v(" with the given operator.")]),e._v(" "),a("p",[a("strong",[e._v("Kind")]),e._v(": global function"),a("br"),e._v(" "),a("strong",[e._v("Returns")]),e._v(": "),a("code",[e._v("boolean")]),e._v(" - "),a("code",[e._v("true")]),e._v(" if the comparison matches, "),a("code",[e._v("false")]),e._v(" otherwise")]),e._v(" "),a("table",[a("thead",[a("tr",[a("th",[e._v("Param")]),e._v(" "),a("th",[e._v("Type")]),e._v(" "),a("th",[e._v("Description")])])]),e._v(" "),a("tbody",[a("tr",[a("td",[e._v("a")]),e._v(" "),a("td",[a("code",[e._v("number")])]),e._v(" "),a("td",[e._v("The number to compare with "),a("code",[e._v("b")])])]),e._v(" "),a("tr",[a("td",[e._v("b")]),e._v(" "),a("td",[a("code",[e._v("number")])]),e._v(" "),a("td",[e._v("The number to compare with "),a("code",[e._v("a")])])]),e._v(" "),a("tr",[a("td",[e._v("operator")]),e._v(" "),a("td",[a("code",[e._v("string")])]),e._v(" "),a("td",[e._v("A valid comparative operator: "),a("code",[e._v("=, <, >, <=, >=, !=")])])])])]),e._v(" "),a("p",[a("a",{attrs:{name:"isBase64"}})]),e._v(" "),a("h2",{attrs:{id:"isbase64-val-⇒-boolean"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#isbase64-val-⇒-boolean"}},[e._v("#")]),e._v(" isBase64(val) ⇒ "),a("code",[e._v("boolean")])]),e._v(" "),a("p",[e._v("Check if the value is a valid base64 encoded string.")]),e._v(" "),a("p",[a("strong",[e._v("Kind")]),e._v(": global function"),a("br"),e._v(" "),a("strong",[e._v("Returns")]),e._v(": "),a("code",[e._v("boolean")]),e._v(" - "),a("code",[e._v("true")]),e._v(" if it is valid base64 encoded, "),a("code",[e._v("false")]),e._v(" otherwise")]),e._v(" "),a("table",[a("thead",[a("tr",[a("th",[e._v("Param")]),e._v(" "),a("th",[e._v("Type")])])]),e._v(" "),a("tbody",[a("tr",[a("td",[e._v("val")]),e._v(" "),a("td",[a("code",[e._v("string")])])])])]),e._v(" "),a("p",[a("a",{attrs:{name:"isJson"}})]),e._v(" "),a("h2",{attrs:{id:"isjson-val-⇒-boolean"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#isjson-val-⇒-boolean"}},[e._v("#")]),e._v(" isJson(val) ⇒ "),a("code",[e._v("boolean")])]),e._v(" "),a("p",[e._v("Check if the value is a valid JSON encoded string.")]),e._v(" "),a("p",[a("strong",[e._v("Kind")]),e._v(": global function"),a("br"),e._v(" "),a("strong",[e._v("Returns")]),e._v(": "),a("code",[e._v("boolean")]),e._v(" - "),a("code",[e._v("true")]),e._v(" if the value is valid JSON, "),a("code",[e._v("false")]),e._v(" otherwise")]),e._v(" "),a("table",[a("thead",[a("tr",[a("th",[e._v("Param")]),e._v(" "),a("th",[e._v("Type")])])]),e._v(" "),a("tbody",[a("tr",[a("td",[e._v("val")]),e._v(" "),a("td",[a("code",[e._v("string")])])])])]),e._v(" "),a("p",[a("a",{attrs:{name:"isNumeric"}})]),e._v(" "),a("h2",{attrs:{id:"isnumeric-val-⇒-boolean"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#isnumeric-val-⇒-boolean"}},[e._v("#")]),e._v(" isNumeric(val) ⇒ "),a("code",[e._v("boolean")])]),e._v(" "),a("p",[e._v("Check if the given value is a valid finite number.")]),e._v(" "),a("p",[a("strong",[e._v("Kind")]),e._v(": global function"),a("br"),e._v(" "),a("strong",[e._v("Returns")]),e._v(": "),a("code",[e._v("boolean")]),e._v(" - "),a("code",[e._v("true")]),e._v(" if it is a finite number, "),a("code",[e._v("false")]),e._v(" otherwise")]),e._v(" "),a("table",[a("thead",[a("tr",[a("th",[e._v("Param")]),e._v(" "),a("th",[e._v("Type")])])]),e._v(" "),a("tbody",[a("tr",[a("td",[e._v("val")]),e._v(" "),a("td",[a("code",[e._v("*")])])])])]),e._v(" "),a("p",[a("a",{attrs:{name:"isSafeNumber"}})]),e._v(" "),a("h2",{attrs:{id:"issafenumber-val-⇒-boolean"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#issafenumber-val-⇒-boolean"}},[e._v("#")]),e._v(" isSafeNumber(val) ⇒ "),a("code",[e._v("boolean")])]),e._v(" "),a("p",[e._v('Check if the given value is a "safe" number.')]),e._v(" "),a("p",[e._v('A "safe" number falls within the '),a("code",[e._v("Number.MAX_SAFE_INTEGER")]),e._v(" and "),a("code",[e._v("Number.MIN_SAFE_INTEGER")]),e._v(" values\n(Inclusive).")]),e._v(" "),a("p",[a("strong",[e._v("Kind")]),e._v(": global function"),a("br"),e._v(" "),a("strong",[e._v("Returns")]),e._v(": "),a("code",[e._v("boolean")]),e._v(" - "),a("code",[e._v("true")]),e._v(' if the value is a "safe" number, '),a("code",[e._v("false")]),e._v(" otherwise")]),e._v(" "),a("table",[a("thead",[a("tr",[a("th",[e._v("Param")]),e._v(" "),a("th",[e._v("Type")])])]),e._v(" "),a("tbody",[a("tr",[a("td",[e._v("val")]),e._v(" "),a("td",[a("code",[e._v("*")])])])])]),e._v(" "),a("p",[a("a",{attrs:{name:"sumArray"}})]),e._v(" "),a("h2",{attrs:{id:"sumarray-numbers-⇒-number"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sumarray-numbers-⇒-number"}},[e._v("#")]),e._v(" sumArray(numbers) ⇒ "),a("code",[e._v("number")])]),e._v(" "),a("p",[e._v("Take an array of numbers and add the values together.")]),e._v(" "),a("p",[a("strong",[e._v("Kind")]),e._v(": global function"),a("br"),e._v(" "),a("strong",[e._v("Returns")]),e._v(": "),a("code",[e._v("number")]),e._v(" - The summed value")]),e._v(" "),a("table",[a("thead",[a("tr",[a("th",[e._v("Param")]),e._v(" "),a("th",[e._v("Type")])])]),e._v(" "),a("tbody",[a("tr",[a("td",[e._v("numbers")]),e._v(" "),a("td",[a("code",[e._v("Array.<number>")])])])])]),e._v(" "),a("p",[a("a",{attrs:{name:"toFixed"}})]),e._v(" "),a("h2",{attrs:{id:"tofixed-num-precision-⇒-number"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tofixed-num-precision-⇒-number"}},[e._v("#")]),e._v(" toFixed(num, [precision]) ⇒ "),a("code",[e._v("number")])]),e._v(" "),a("p",[e._v("Round a number to the given amount of digits after the decimal point, removing any trailing\nzeros after the decimal point.")]),e._v(" "),a("p",[a("strong",[e._v("Kind")]),e._v(": global function")]),e._v(" "),a("table",[a("thead",[a("tr",[a("th",[e._v("Param")]),e._v(" "),a("th",[e._v("Type")]),e._v(" "),a("th",[e._v("Default")]),e._v(" "),a("th",[e._v("Description")])])]),e._v(" "),a("tbody",[a("tr",[a("td",[e._v("num")]),e._v(" "),a("td",[a("code",[e._v("number")])]),e._v(" "),a("td"),e._v(" "),a("td",[e._v("The number to round")])]),e._v(" "),a("tr",[a("td",[e._v("[precision]")]),e._v(" "),a("td",[a("code",[e._v("number")])]),e._v(" "),a("td",[a("code",[e._v("0")])]),e._v(" "),a("td",[e._v("The number of digits after the decimal point")])])])]),e._v(" "),a("p",[a("strong",[e._v("Example")])]),e._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[e._v("toFixed")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[e._v("1.236")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[e._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// 1.24")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("toFixed")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[e._v("30.1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[e._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// 30.1")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("toFixed")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[e._v("4.0000000004")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[e._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// 4")]),e._v("\n")])])])])}),[],!1,null,null,null);t.default=r.exports}}]);